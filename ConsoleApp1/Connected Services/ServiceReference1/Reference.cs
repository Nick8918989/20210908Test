//------------------------------------------------------------------------------
// <auto-generated>
//     這段程式碼是由工具產生的。
//
//     變更此檔案可能會導致不正確的行為，而且若已重新產生
//     程式碼，則會遺失變更。
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceReference1
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PDFSetting", Namespace="http://schemas.datacontract.org/2004/07/PDFService")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceReference1.PDFAdvanceSetting))]
    public partial class PDFSetting : object
    {
        
        private string HtmlField;
        
        private string VersionField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Html
        {
            get
            {
                return this.HtmlField;
            }
            set
            {
                this.HtmlField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Version
        {
            get
            {
                return this.VersionField;
            }
            set
            {
                this.VersionField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PDFAdvanceSetting", Namespace="http://schemas.datacontract.org/2004/07/PDFService")]
    public partial class PDFAdvanceSetting : ServiceReference1.PDFSetting
    {
        
        private System.Nullable<bool> DebugField;
        
        private System.Nullable<int> JavascriptDelayField;
        
        private string UrlField;
        
        private string WaitingWindowStatusField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> Debug
        {
            get
            {
                return this.DebugField;
            }
            set
            {
                this.DebugField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> JavascriptDelay
        {
            get
            {
                return this.JavascriptDelayField;
            }
            set
            {
                this.JavascriptDelayField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Url
        {
            get
            {
                return this.UrlField;
            }
            set
            {
                this.UrlField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string WaitingWindowStatus
        {
            get
            {
                return this.WaitingWindowStatusField;
            }
            set
            {
                this.WaitingWindowStatusField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService")]
    public interface IService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/TransformFromUrl", ReplyAction="http://tempuri.org/IService/TransformFromUrlResponse")]
        System.Threading.Tasks.Task<byte[]> TransformFromUrlAsync(string _url);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/TransformFromString", ReplyAction="http://tempuri.org/IService/TransformFromStringResponse")]
        System.Threading.Tasks.Task<byte[]> TransformFromStringAsync(string _html);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/TransFromPdfSettingString", ReplyAction="http://tempuri.org/IService/TransFromPdfSettingStringResponse")]
        System.Threading.Tasks.Task<byte[]> TransFromPdfSettingStringAsync(ServiceReference1.PDFSetting _setting);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/TransFromPdfAdvanceSetting", ReplyAction="http://tempuri.org/IService/TransFromPdfAdvanceSettingResponse")]
        System.Threading.Tasks.Task<byte[]> TransFromPdfAdvanceSettingAsync(ServiceReference1.PDFAdvanceSetting _setting);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface IServiceChannel : ServiceReference1.IService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<ServiceReference1.IService>, ServiceReference1.IService
    {
        
        /// <summary>
        /// 實作此部分方法來設定服務端點。
        /// </summary>
        /// <param name="serviceEndpoint">要設定的端點</param>
        /// <param name="clientCredentials">用戶端認證</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public ServiceClient() : 
                base(ServiceClient.GetDefaultBinding(), ServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.NetTcpBinding_IService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(ServiceClient.GetBindingForEndpoint(endpointConfiguration), ServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(ServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(ServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<byte[]> TransformFromUrlAsync(string _url)
        {
            return base.Channel.TransformFromUrlAsync(_url);
        }
        
        public System.Threading.Tasks.Task<byte[]> TransformFromStringAsync(string _html)
        {
            return base.Channel.TransformFromStringAsync(_html);
        }
        
        public System.Threading.Tasks.Task<byte[]> TransFromPdfSettingStringAsync(ServiceReference1.PDFSetting _setting)
        {
            return base.Channel.TransFromPdfSettingStringAsync(_setting);
        }
        
        public System.Threading.Tasks.Task<byte[]> TransFromPdfAdvanceSettingAsync(ServiceReference1.PDFAdvanceSetting _setting)
        {
            return base.Channel.TransFromPdfAdvanceSettingAsync(_setting);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.NetTcpBinding_IService))
            {
                System.ServiceModel.NetTcpBinding result = new System.ServiceModel.NetTcpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.TransferMode = System.ServiceModel.TransferMode.Streamed;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("找不到名為 \'{0}\' 的端點。", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.NetTcpBinding_IService))
            {
                return new System.ServiceModel.EndpointAddress("net.tcp://localhost:60003/PDFWebService");
            }
            throw new System.InvalidOperationException(string.Format("找不到名為 \'{0}\' 的端點。", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return ServiceClient.GetBindingForEndpoint(EndpointConfiguration.NetTcpBinding_IService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return ServiceClient.GetEndpointAddress(EndpointConfiguration.NetTcpBinding_IService);
        }
        
        public enum EndpointConfiguration
        {
            
            NetTcpBinding_IService,
        }
    }
}
